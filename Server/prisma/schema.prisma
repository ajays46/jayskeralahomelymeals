generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Auth {
  id          String   @id @default(uuid()) @db.VarChar(36)
  email       String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  phoneNumber String?  @map("phone_number") @db.VarChar(255)
  apiKey      String   @map("api_key") @db.VarChar(255)
  status      Status   @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User?

  @@map("auths")
}

model User {
  id          String     @id @default(uuid()) @db.VarChar(36)
  customerId  Int        @unique @map("customer_id")
  authId      String     @unique @map("auth_id") @db.VarChar(36)
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  auth        Auth       @relation(fields: [authId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userRole    UserRole?
  addresses   Address[]

  @@map("users")
}

model Address {
  id          String      @id @default(uuid()) @db.VarChar(36)
  userId      String      @map("user_id") @db.VarChar(36)
  street      String      @db.VarChar(255)
  housename   String      @db.VarChar(255)
  city        String      @db.VarChar(255)
  pincode     Int
  geoLocation String?     @map("geo_location") @db.VarChar(255)
  addressType AddressType @default(HOME) @map("address_type")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders      Order[]
  deliveryItems DeliveryItem[]

  @@map("addresses")
}

model UserRole {
  userId    String   @id @map("user_id") @db.VarChar(36)
  name      RoleName @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_roles")
}

model Company {
  id                String            @id @default(uuid())
  name              String
  address_id        String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  products          Product[]
  menus             Menu[]
  productCategories ProductCategory[]
  menuCategories    MenuCategory[]
  menuItemPrices    MenuItemPrice[]

  @@map("company")
}

model Product {
  id          String            @id @default(uuid()) @db.VarChar(36)
  companyId   String            @map("company_id") @db.VarChar(36)
  imageUrl    String?           @map("image_url") @db.Text
  code        String            @unique @db.VarChar(255)
  productName String            @map("product_name") @db.VarChar(255)
  status      ProductStatus     @default(ACTIVE)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  prices      ProductPrice[]
  quantities  ProductQuantity[]
  categories  ProductCategory[]
  menuItems   MenuItem[]

  @@map("products")
}

model ProductPrice {
  id        String   @id @default(uuid()) @db.VarChar(36)
  date      DateTime @db.Date
  productId String   @map("product_id") @db.VarChar(36)
  price     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("product_prices")
}

model ProductQuantity {
  id        String   @id @default(uuid()) @db.VarChar(36)
  date      DateTime @db.Date
  productId String   @map("product_id") @db.VarChar(36)
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("product_quantities")
}

model MenuItem {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  productId   String?  @map("product_id") @db.VarChar(36) // Reference to Product
  menuId      String   @map("menu_id") @db.VarChar(36)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  prices      MenuItemPrice[]
  deliveryItems DeliveryItem[]

  @@map("menu_items")
}

model MenuItemPrice {
  id          String   @id @default(uuid()) @db.VarChar(36)
  companyId   String   @map("company_id") @db.VarChar(36)
  menuItemId  String   @map("menu_item_id") @db.VarChar(36)
  totalPrice  Int      @map("total_price")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItem  MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("menu_item_prices")
}

model MenuCategory {
  id          String   @id @default(uuid()) @db.VarChar(36)
  companyId   String   @map("company_id") @db.VarChar(36)
  menuId      String   @map("menu_id") @db.VarChar(36)
  name        String   @db.VarChar(255)
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menu    Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("menu_categories")
}

model Menu {
  id          String            @id @default(uuid()) @db.VarChar(36)
  companyId   String            @map("company_id") @db.VarChar(36)
  name        String            @db.VarChar(255)
  status      MenuStatus        @default(ACTIVE)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  company     Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItems   MenuItem[]
  menuCategories MenuCategory[]

  @@map("menus")
}

model ProductCategory {
  id                  String   @id @default(uuid()) @db.VarChar(36)
  companyId           String   @map("company_id") @db.VarChar(36)
  productId           String   @map("product_id") @db.VarChar(36)
  productCategoryName String   @map("product_category_name") @db.VarChar(255)
  description         String   @db.Text
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("product_categories")
}

model Deliveries {
  ID               Int      @id @default(autoincrement())
  Date             DateTime @db.Date
  Delivery_Name    String   @db.VarChar(100)
  Location         String?  @db.VarChar(150)
  Packages         Int?     @default(0)
  Final_Latitude   Decimal? @db.Decimal(10, 6)
  Final_Longitude  Decimal? @db.Decimal(10, 6)
  Coords           String?  @db.VarChar(100)
  Distance_Diff_km Decimal? @db.Decimal(10, 2)
}

model CustomerSubscription {
  customerId        Int           @id @map("customer_id")
  subscriptionType  Int           @map("subscription_type")
  morningStatus     SubscriptionStatus @map("morning_status")
  lunchStatus       SubscriptionStatus @map("lunch_status")
  dinnerStatus      SubscriptionStatus @map("dinner_status")

  @@map("customer_subscription")
}

model Order {
  id                    String           @id @default(uuid()) @db.VarChar(36)
  userId                String           @map("user_id") @db.VarChar(36)
  linkedRecurringOrderId String?         @map("linked_recurring_order_id") @db.VarChar(36)
  orderDate             DateTime         @map("order_date") @db.Date
  status                OrderStatus      @default(Pending)
  orderTimes            String           @map("order_times") // JSON string of OrderTime array
  totalPrice            Int              @map("total_price")
  deliveryAddressId     String?          @map("delivery_address_id") @db.VarChar(36)
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  
  deliveryAddress       Address?         @relation(fields: [deliveryAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  deliveryItems         DeliveryItem[]

  @@map("orders")
}


model DeliveryItem {
  id                 String           @id @default(uuid()) @db.VarChar(36)
  orderId            String           @map("order_id") @db.VarChar(36)
  menuItemId         String           @map("menu_item_id") @db.VarChar(36)
  quantity           Int
  total              Int
  deliveryDate       DateTime         @map("delivery_date") @db.Date
  deliveryTimeSlot   DeliveryTimeSlot @map("delivery_time_slot")
  addressId          String           @map("address_id") @db.VarChar(36)
  status             OrderStatus      @default(Pending)
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  
  // Relations
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItem           MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deliveryAddress    Address          @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("delivery_items")
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum RoleName {
  USER
  SELLER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum MenuStatus {
  ACTIVE
  INACTIVE
  DRAFT
  PUBLISHED
}

enum FoodType {
  VEG
  NON_VEG
}

enum SubscriptionStatus {
  YES
  NO
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}

enum OrderStatus {
  Pending
  Confirmed
  Cancelled
  Delivered
  Payment_Confirmed
}

enum OrderTime {
  Morning
  Noon
  Night
}

enum DeliveryTimeSlot {
  Breakfast
  Lunch
  Dinner
}


